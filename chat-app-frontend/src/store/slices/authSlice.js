import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { authApi } from "../../api/endpoints/authApi.js";
import { getOrCreateGuestId } from "../../utils/guestId.js";

export const loginWithGoogle = createAsyncThunk(
  "authStore/loginWithGoogle",
  async (googleAccessToken, { rejectWithValue }) => {
    try {
      // –û—á—ñ–∫—É—î–º–æ, —â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä–Ω–µ { token: '–≤–∞—à.–ª–æ–∫–∞–ª—å–Ω–∏–π.jwt', user: {...}, userId: '...' }
      const response = await authApi.googleLogin(googleAccessToken);
      
      const userId = response.userId;
      const authToken = response.token; // –õ–æ–∫–∞–ª—å–Ω–∏–π JWT

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±–∏–¥–≤–∞: ID –¥–ª—è —Å—Ç–∞—Ä—Ç—É –∞–≤—Ç–æ–ª–æ–≥—ñ–Ω—É —ñ –≥–æ–ª–æ–≤–Ω–∏–π –∫–ª—é—á - JWT.
      localStorage.setItem('user_id', userId);
      localStorage.setItem('authToken', authToken); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ JWT
      
      return response;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Login failed');
    }
  }
);


export const autoLogin = createAsyncThunk(
  "authStore/autoLogin",
  async (_, { rejectWithValue }) => {
    const authToken = localStorage.getItem('authToken'); // –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω
    console.log(authToken)
    if (!authToken) {
      return rejectWithValue('No auth token found. Guest mode.'); // –ù–µ –ø–æ–º–∏–ª–∫–∞, –∞ –≥–æ—Å—Ç—å–æ–≤–∏–π —Ä–µ–∂–∏–º
    }

    try {
      // –í–∏–∫–ª–∏–∫ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥—É getMe, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î JWT –∑ —ñ–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–∞
      // –¶–µ GET-–∑–∞–ø–∏—Ç –¥–æ /me –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const response = await authApi.login(); 
      
      if (response && response.user) {
        // –û–Ω–æ–≤–ª—é—î–º–æ userId, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Ö–æ—á–∞ –≥–æ–ª–æ–≤–Ω–µ - —Ü–µ user –æ–±'—î–∫—Ç
        localStorage.setItem('user_id', response.userId);
        return response;
      } else {
        localStorage.removeItem('authToken');
        localStorage.removeItem('user_id');
        return rejectWithValue('User data could not be retrieved.');
      }

    } catch (error) {
      // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π (401), –æ—á–∏—â–∞—î–º–æ —Å—Ö–æ–≤–∏—â–µ
      localStorage.removeItem('authToken');
      localStorage.removeItem('user_id');
      return rejectWithValue(error.response?.data?.message || 'Authentication failed');
    }
  }
);


const getInitialUserId = () => {
    // üö© –ù–û–í–ï: –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ ID –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  let userId = localStorage.getItem('user_id'); 
    // –Ø–∫—â–æ ID –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –≥–µ–Ω–µ—Ä—É—î–º–æ/–æ—Ç—Ä–∏–º—É—î–º–æ –≥–æ—Å—Ç—å–æ–≤–∏–π ID
    if (!userId) {
        // getOrCreateGuestId() –ø–æ–≤–µ—Ä–Ω–µ guest_id (—è–∫—â–æ authToken –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ) –∞–±–æ null
        const guestId = getOrCreateGuestId();
        // –Ø–∫—â–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≥–æ—Å—Ç—å–æ–≤–∏–π ID, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ —è–∫ –ø–æ—Ç–æ—á–Ω–∏–π userId
        if (guestId) {
            return guestId;
        }
    }
    return userId; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞–±–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π ID, –∞–±–æ null
};


const authSlice = createSlice({
  name: "authStore",
  initialState: { 
    user: null, 
    userId: getInitialUserId(), 
    loading: false, 
    error: null },
  reducers: {
    logout: (state) => {
      state.user = null;
      state.userId = getOrCreateGuestId();;
        localStorage.removeItem('authToken');
        localStorage.removeItem('user_id');
        localStorage.removeItem('guest_id');
    },
    // –†–µ–¥—é—Å–µ—Ä –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –±–µ–∑ thunk (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    setUserId: (state, action) => {
      state.userId = action.payload;
    }
  },
extraReducers: (builder) => {
    builder
        // --- loginWithGoogle Reducers ---
        .addCase(loginWithGoogle.pending, (state) => {
            state.loading = true;
            state.error = null;
        })
        .addCase(loginWithGoogle.fulfilled, (state, action) => {
            state.loading = false;
            state.user = action.payload.user; 
            state.userId = action.payload.userId; 
            state.error = null;
        })
        .addCase(loginWithGoogle.rejected, (state, action) => {
            state.loading = false;
            state.error = action.payload;
            state.userId = null;
            localStorage.removeItem('user_id');
        })
        // --- autoLogin Reducers ---
        .addCase(autoLogin.pending, (state) => {
            state.loading = true;
            state.error = null;
        })
        .addCase(autoLogin.fulfilled, (state, action) => {
            state.loading = false;
            state.user = action.payload.user; // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            // userId –Ω–µ –∑–º—ñ–Ω—é—î–º–æ, –≤—ñ–Ω –≤–∂–µ –±—É–≤ —É —Å—Ö–æ–≤–∏—â—ñ
            state.error = null;
        })
        .addCase(autoLogin.rejected, (state, action) => {
            state.loading = false;
            state.error = action.payload;
            state.user = null; // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ª–æ–≥—ñ–Ω—É —Å–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ
            localStorage.removeItem('authToken');
            localStorage.removeItem('user_id');
        });
  },
});

export const { logout, setUserId } = authSlice.actions;
export default authSlice.reducer;